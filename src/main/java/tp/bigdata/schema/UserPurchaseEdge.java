package tp.bigdata.schema;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-10-2")
public class UserPurchaseEdge implements org.apache.thrift.TBase<UserPurchaseEdge, UserPurchaseEdge._Fields>, java.io.Serializable, Cloneable, Comparable<UserPurchaseEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserPurchaseEdge");

  private static final org.apache.thrift.protocol.TField USER_PURCHASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_purchase_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("product", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserPurchaseEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserPurchaseEdgeTupleSchemeFactory());
  }

  private long user_purchase_id; // required
  private User user; // required
  private Product product; // required
  private double quantity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_PURCHASE_ID((short)1, "user_purchase_id"),
    USER((short)2, "user"),
    PRODUCT((short)3, "product"),
    QUANTITY((short)4, "quantity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_PURCHASE_ID
          return USER_PURCHASE_ID;
        case 2: // USER
          return USER;
        case 3: // PRODUCT
          return PRODUCT;
        case 4: // QUANTITY
          return QUANTITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_PURCHASE_ID_ISSET_ID = 0;
  private static final int __QUANTITY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_PURCHASE_ID, new org.apache.thrift.meta_data.FieldMetaData("user_purchase_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("product", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserPurchaseEdge.class, metaDataMap);
  }

  public UserPurchaseEdge() {
  }

  public UserPurchaseEdge(
    long user_purchase_id,
    User user,
    Product product,
    double quantity)
  {
    this();
    this.user_purchase_id = user_purchase_id;
    set_user_purchase_id_isSet(true);
    this.user = user;
    this.product = product;
    this.quantity = quantity;
    set_quantity_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserPurchaseEdge(UserPurchaseEdge other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user_purchase_id = other.user_purchase_id;
    if (other.is_set_user()) {
      this.user = new User(other.user);
    }
    if (other.is_set_product()) {
      this.product = new Product(other.product);
    }
    this.quantity = other.quantity;
  }

  public UserPurchaseEdge deepCopy() {
    return new UserPurchaseEdge(this);
  }

  @Override
  public void clear() {
    set_user_purchase_id_isSet(false);
    this.user_purchase_id = 0;
    this.user = null;
    this.product = null;
    set_quantity_isSet(false);
    this.quantity = 0.0;
  }

  public long get_user_purchase_id() {
    return this.user_purchase_id;
  }

  public void set_user_purchase_id(long user_purchase_id) {
    this.user_purchase_id = user_purchase_id;
    set_user_purchase_id_isSet(true);
  }

  public void unset_user_purchase_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_PURCHASE_ID_ISSET_ID);
  }

  /** Returns true if field user_purchase_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_user_purchase_id() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_PURCHASE_ID_ISSET_ID);
  }

  public void set_user_purchase_id_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_PURCHASE_ID_ISSET_ID, value);
  }

  public User get_user() {
    return this.user;
  }

  public void set_user(User user) {
    this.user = user;
  }

  public void unset_user() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean is_set_user() {
    return this.user != null;
  }

  public void set_user_isSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public Product get_product() {
    return this.product;
  }

  public void set_product(Product product) {
    this.product = product;
  }

  public void unset_product() {
    this.product = null;
  }

  /** Returns true if field product is set (has been assigned a value) and false otherwise */
  public boolean is_set_product() {
    return this.product != null;
  }

  public void set_product_isSet(boolean value) {
    if (!value) {
      this.product = null;
    }
  }

  public double get_quantity() {
    return this.quantity;
  }

  public void set_quantity(double quantity) {
    this.quantity = quantity;
    set_quantity_isSet(true);
  }

  public void unset_quantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean is_set_quantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void set_quantity_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_PURCHASE_ID:
      if (value == null) {
        unset_user_purchase_id();
      } else {
        set_user_purchase_id((Long)value);
      }
      break;

    case USER:
      if (value == null) {
        unset_user();
      } else {
        set_user((User)value);
      }
      break;

    case PRODUCT:
      if (value == null) {
        unset_product();
      } else {
        set_product((Product)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unset_quantity();
      } else {
        set_quantity((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_PURCHASE_ID:
      return Long.valueOf(get_user_purchase_id());

    case USER:
      return get_user();

    case PRODUCT:
      return get_product();

    case QUANTITY:
      return Double.valueOf(get_quantity());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_PURCHASE_ID:
      return is_set_user_purchase_id();
    case USER:
      return is_set_user();
    case PRODUCT:
      return is_set_product();
    case QUANTITY:
      return is_set_quantity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserPurchaseEdge)
      return this.equals((UserPurchaseEdge)that);
    return false;
  }

  public boolean equals(UserPurchaseEdge that) {
    if (that == null)
      return false;

    boolean this_present_user_purchase_id = true;
    boolean that_present_user_purchase_id = true;
    if (this_present_user_purchase_id || that_present_user_purchase_id) {
      if (!(this_present_user_purchase_id && that_present_user_purchase_id))
        return false;
      if (this.user_purchase_id != that.user_purchase_id)
        return false;
    }

    boolean this_present_user = true && this.is_set_user();
    boolean that_present_user = true && that.is_set_user();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_product = true && this.is_set_product();
    boolean that_present_product = true && that.is_set_product();
    if (this_present_product || that_present_product) {
      if (!(this_present_product && that_present_product))
        return false;
      if (!this.product.equals(that.product))
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_user_purchase_id = true;
    list.add(present_user_purchase_id);
    if (present_user_purchase_id)
      list.add(user_purchase_id);

    boolean present_user = true && (is_set_user());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_product = true && (is_set_product());
    list.add(present_product);
    if (present_product)
      list.add(product);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserPurchaseEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_user_purchase_id()).compareTo(other.is_set_user_purchase_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_user_purchase_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_purchase_id, other.user_purchase_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_user()).compareTo(other.is_set_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_product()).compareTo(other.is_set_product());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_product()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product, other.product);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_quantity()).compareTo(other.is_set_quantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_quantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserPurchaseEdge(");
    boolean first = true;

    sb.append("user_purchase_id:");
    sb.append(this.user_purchase_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("product:");
    if (this.product == null) {
      sb.append("null");
    } else {
      sb.append(this.product);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_user()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' is unset! Struct:" + toString());
    }

    if (!is_set_product()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'product' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserPurchaseEdgeStandardSchemeFactory implements SchemeFactory {
    public UserPurchaseEdgeStandardScheme getScheme() {
      return new UserPurchaseEdgeStandardScheme();
    }
  }

  private static class UserPurchaseEdgeStandardScheme extends StandardScheme<UserPurchaseEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserPurchaseEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_PURCHASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.user_purchase_id = iprot.readI64();
              struct.set_user_purchase_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new User();
              struct.user.read(iprot);
              struct.set_user_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.product = new Product();
              struct.product.read(iprot);
              struct.set_product_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quantity = iprot.readDouble();
              struct.set_quantity_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserPurchaseEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_PURCHASE_ID_FIELD_DESC);
      oprot.writeI64(struct.user_purchase_id);
      oprot.writeFieldEnd();
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.product != null) {
        oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
        struct.product.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeDouble(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserPurchaseEdgeTupleSchemeFactory implements SchemeFactory {
    public UserPurchaseEdgeTupleScheme getScheme() {
      return new UserPurchaseEdgeTupleScheme();
    }
  }

  private static class UserPurchaseEdgeTupleScheme extends TupleScheme<UserPurchaseEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserPurchaseEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.user.write(oprot);
      struct.product.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.is_set_user_purchase_id()) {
        optionals.set(0);
      }
      if (struct.is_set_quantity()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_user_purchase_id()) {
        oprot.writeI64(struct.user_purchase_id);
      }
      if (struct.is_set_quantity()) {
        oprot.writeDouble(struct.quantity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserPurchaseEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.user = new User();
      struct.user.read(iprot);
      struct.set_user_isSet(true);
      struct.product = new Product();
      struct.product.read(iprot);
      struct.set_product_isSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.user_purchase_id = iprot.readI64();
        struct.set_user_purchase_id_isSet(true);
      }
      if (incoming.get(1)) {
        struct.quantity = iprot.readDouble();
        struct.set_quantity_isSet(true);
      }
    }
  }

}

