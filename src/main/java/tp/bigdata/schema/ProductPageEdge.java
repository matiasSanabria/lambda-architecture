package tp.bigdata.schema;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-10-2")
public class ProductPageEdge implements org.apache.thrift.TBase<ProductPageEdge, ProductPageEdge._Fields>, java.io.Serializable, Cloneable, Comparable<ProductPageEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductPageEdge");

  private static final org.apache.thrift.protocol.TField PRODUCT_PAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("product_page_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("product", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductPageEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductPageEdgeTupleSchemeFactory());
  }

  private long product_page_id; // required
  private Page page; // required
  private Product product; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_PAGE_ID((short)1, "product_page_id"),
    PAGE((short)2, "page"),
    PRODUCT((short)3, "product");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_PAGE_ID
          return PRODUCT_PAGE_ID;
        case 2: // PAGE
          return PAGE;
        case 3: // PRODUCT
          return PRODUCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCT_PAGE_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_PAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("product_page_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Page.class)));
    tmpMap.put(_Fields.PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("product", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductPageEdge.class, metaDataMap);
  }

  public ProductPageEdge() {
  }

  public ProductPageEdge(
    long product_page_id,
    Page page,
    Product product)
  {
    this();
    this.product_page_id = product_page_id;
    set_product_page_id_isSet(true);
    this.page = page;
    this.product = product;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductPageEdge(ProductPageEdge other) {
    __isset_bitfield = other.__isset_bitfield;
    this.product_page_id = other.product_page_id;
    if (other.is_set_page()) {
      this.page = new Page(other.page);
    }
    if (other.is_set_product()) {
      this.product = new Product(other.product);
    }
  }

  public ProductPageEdge deepCopy() {
    return new ProductPageEdge(this);
  }

  @Override
  public void clear() {
    set_product_page_id_isSet(false);
    this.product_page_id = 0;
    this.page = null;
    this.product = null;
  }

  public long get_product_page_id() {
    return this.product_page_id;
  }

  public void set_product_page_id(long product_page_id) {
    this.product_page_id = product_page_id;
    set_product_page_id_isSet(true);
  }

  public void unset_product_page_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCT_PAGE_ID_ISSET_ID);
  }

  /** Returns true if field product_page_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_product_page_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCT_PAGE_ID_ISSET_ID);
  }

  public void set_product_page_id_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCT_PAGE_ID_ISSET_ID, value);
  }

  public Page get_page() {
    return this.page;
  }

  public void set_page(Page page) {
    this.page = page;
  }

  public void unset_page() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean is_set_page() {
    return this.page != null;
  }

  public void set_page_isSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  public Product get_product() {
    return this.product;
  }

  public void set_product(Product product) {
    this.product = product;
  }

  public void unset_product() {
    this.product = null;
  }

  /** Returns true if field product is set (has been assigned a value) and false otherwise */
  public boolean is_set_product() {
    return this.product != null;
  }

  public void set_product_isSet(boolean value) {
    if (!value) {
      this.product = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_PAGE_ID:
      if (value == null) {
        unset_product_page_id();
      } else {
        set_product_page_id((Long)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unset_page();
      } else {
        set_page((Page)value);
      }
      break;

    case PRODUCT:
      if (value == null) {
        unset_product();
      } else {
        set_product((Product)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_PAGE_ID:
      return Long.valueOf(get_product_page_id());

    case PAGE:
      return get_page();

    case PRODUCT:
      return get_product();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_PAGE_ID:
      return is_set_product_page_id();
    case PAGE:
      return is_set_page();
    case PRODUCT:
      return is_set_product();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductPageEdge)
      return this.equals((ProductPageEdge)that);
    return false;
  }

  public boolean equals(ProductPageEdge that) {
    if (that == null)
      return false;

    boolean this_present_product_page_id = true;
    boolean that_present_product_page_id = true;
    if (this_present_product_page_id || that_present_product_page_id) {
      if (!(this_present_product_page_id && that_present_product_page_id))
        return false;
      if (this.product_page_id != that.product_page_id)
        return false;
    }

    boolean this_present_page = true && this.is_set_page();
    boolean that_present_page = true && that.is_set_page();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_product = true && this.is_set_product();
    boolean that_present_product = true && that.is_set_product();
    if (this_present_product || that_present_product) {
      if (!(this_present_product && that_present_product))
        return false;
      if (!this.product.equals(that.product))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_product_page_id = true;
    list.add(present_product_page_id);
    if (present_product_page_id)
      list.add(product_page_id);

    boolean present_page = true && (is_set_page());
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_product = true && (is_set_product());
    list.add(present_product);
    if (present_product)
      list.add(product);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductPageEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_product_page_id()).compareTo(other.is_set_product_page_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_product_page_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product_page_id, other.product_page_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_page()).compareTo(other.is_set_page());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_page()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_product()).compareTo(other.is_set_product());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_product()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product, other.product);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductPageEdge(");
    boolean first = true;

    sb.append("product_page_id:");
    sb.append(this.product_page_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    if (this.page == null) {
      sb.append("null");
    } else {
      sb.append(this.page);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("product:");
    if (this.product == null) {
      sb.append("null");
    } else {
      sb.append(this.product);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_page()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'page' is unset! Struct:" + toString());
    }

    if (!is_set_product()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'product' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductPageEdgeStandardSchemeFactory implements SchemeFactory {
    public ProductPageEdgeStandardScheme getScheme() {
      return new ProductPageEdgeStandardScheme();
    }
  }

  private static class ProductPageEdgeStandardScheme extends StandardScheme<ProductPageEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductPageEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_PAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.product_page_id = iprot.readI64();
              struct.set_product_page_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.page = new Page();
              struct.page.read(iprot);
              struct.set_page_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.product = new Product();
              struct.product.read(iprot);
              struct.set_product_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductPageEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PRODUCT_PAGE_ID_FIELD_DESC);
      oprot.writeI64(struct.product_page_id);
      oprot.writeFieldEnd();
      if (struct.page != null) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        struct.page.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.product != null) {
        oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
        struct.product.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductPageEdgeTupleSchemeFactory implements SchemeFactory {
    public ProductPageEdgeTupleScheme getScheme() {
      return new ProductPageEdgeTupleScheme();
    }
  }

  private static class ProductPageEdgeTupleScheme extends TupleScheme<ProductPageEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductPageEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.page.write(oprot);
      struct.product.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.is_set_product_page_id()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_product_page_id()) {
        oprot.writeI64(struct.product_page_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductPageEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.page = new Page();
      struct.page.read(iprot);
      struct.set_page_isSet(true);
      struct.product = new Product();
      struct.product.read(iprot);
      struct.set_product_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.product_page_id = iprot.readI64();
        struct.set_product_page_id_isSet(true);
      }
    }
  }

}

